$date
	Mon Jun 21 21:29:17 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module adder_beh_tb $end
$scope module a1 $end
$var wire 16 ! a [15:0] $end
$var wire 24 " b [23:0] $end
$var wire 24 # o [23:0] $end
$upscope $end
$upscope $end
$scope module mac_tb $end
$scope module mac1 $end
$var wire 8 $ a [7:0] $end
$var wire 24 % si [23:0] $end
$var wire 8 & wi [7:0] $end
$var wire 24 ' so [23:0] $end
$var wire 16 ( multOut [15:0] $end
$scope module ADD $end
$var wire 24 ) b [23:0] $end
$var wire 24 * o [23:0] $end
$var wire 16 + a [15:0] $end
$upscope $end
$scope module MUL $end
$var wire 8 , x [7:0] $end
$var wire 8 - y [7:0] $end
$var wire 16 . po [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module multSigned_tb $end
$scope module m1 $end
$var wire 8 / x [7:0] $end
$var wire 8 0 y [7:0] $end
$var wire 16 1 po [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10010110 1
b1111 0
b1010 /
b10010110 .
b1111 -
b1010 ,
b10010110 +
b10100101 *
b1111 )
b10010110 (
b10100101 '
b1111 &
b1111 %
b1010 $
b11001 #
b1111 "
b1010 !
$end
#50
b10100 0
b1111111100111000 1
b11110110 /
b10100 &
b10100 -
b111111111111111101000111 '
b111111111111111101000111 *
b1111111100111000 (
b1111111100111000 +
b1111111100111000 .
b11110110 $
b11110110 ,
b10100 "
b1010 #
b1111111111110110 !
#100
b11111111 0
b1111111111110100 1
b1100 /
b11111111 &
b11111111 -
b11 '
b11 *
b1111111111110100 (
b1111111111110100 +
b1111111111110100 .
b1100 $
b1100 ,
b111111111111111111111111 "
b1011 #
b1100 !
#150
